version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3

commands:
  destroy_environment:
    description: destroy the cloudformation environment
    steps:
      - run:
          name: delete cf environment
          when: on_fail
          command: |
            aws cloudformation delete-stack \
              --stack-name cicd-ansible-cf-${CIRCLE_WORKFLOW_ID:0:7}
  
jobs:
  create_infrastructure:
    docker:
    - image: amazon/aws-cli
    steps:
    - checkout
    - run:
        name: create cloudformation stack
        command: |
          aws cloudformation create-stack \
            --stack-name cicd-ansible-cf-${CIRCLE_WORKFLOW_ID:0:7} \
            --template-body file://cloudformation/template.yml \
            --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM" \
            --region us-east-1

  configure_infrastructure:
    docker:
    - image: python:3.7-alpine3.11
    steps:
    - checkout
    - add_ssh_keys:
        fingerprints:
        - "	f8:b0:66:b7:4a:ce:76:74:ca:28:26:13:08:73:1f:63"
    - run:
        name: installing ansible
        command: |
          apk add --update ansible
    - run:
        name: configure the server with ansible
        command: |
          ansible-playbook -i inventory.txt main-remote.yml

  smoke_test:
    docker: 
      - image: amazon/aws-cli
    steps:
      - run:
          name: failed step
          command: |
            if curl -s --head maelfosso.com
            then
              exit 0
            else
              exit 1
            fi
      - destroy_environment

  create_and_deploy_front_end:
    docker:
    - image: amazon/aws-cli
    steps:
      - checkout
      - run
          name: Execute bucket.yml - Create cloudformation stack
          command: |
            aws cloudformation deploy \
              --template-file bucket.yml \
              --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides MyBucketName="my-bucket-967177741286-${CIRCLE_WORKFLOW_ID:0.7}" \
              --region us-east-1

  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli 
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Fetch and save the old pipeline ID (bucket name) responsible for the last release
          command: |
            aws cloudformation \
              list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
              --no-paginate --output text --region us-east-1 > ~/textfile
      - persist_to_workspace:
          root: ~/
          paths:
            - textfile.txt

  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute cloudfront.yml
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/cloudfront.yml \
              --stack-name production-distro --region us-east-1 \
              --parameter-overrides PipelineID="my-bucket-967177741286-${CIRCLE_WORKFLOW_ID:0.7}"

  clean_up_old_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attack_workspace:
          at: ~/
      - run:
          name: destroy the previous production version's S3 bucket and CloudFormation stack.
          command: |
            export OldBucketID=$(cat ~/textfile.txt)
            aws s3 rm "s3://${OldBucketID}" --recursive
            aws cloudformation delete-stack production-distro --region us-east-1

    
workflows:
  ansible:
    jobs:
      # - create_infrastructure
      # - configure_infrastructure
      # - smoke_test:
      #     requires: 
      #       - create_infrastructure
      - get_last_deployment_id
      - clean_up_old_front_end
          requires:
            - get_last_deployment_id
      - create_and_deploy_front_end:
          requires:
            - clean_up_old_front_end
      - promote_to_production:
          requires:
            - create_and_deploy_front_end

